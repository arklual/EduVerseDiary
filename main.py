from api.settings import TELEGRAM_TOKEN, LAST_NAMES
from api.school33api import School33Api
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.utils.markdown import hbold, hunderline
import aioschedule
import asyncio
import copy
from collections import Counter
import datetime
from aiogram.utils.exceptions import ChatNotFound
import homeworks

bot = Bot(token=TELEGRAM_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)
api = School33Api()

def get_keyboard():
    keyboard = types.ReplyKeyboardMarkup()
    button_1 = types.KeyboardButton(text="–û—Ü–µ–Ω–∫–∏")
    keyboard.add(button_1)
    button_2 = "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
    keyboard.add(button_2)
    button_3 = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"
    keyboard.add(button_3)
    return keyboard

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –¢—ã —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–Ω–∞–µ—à—å, —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å.\n' 
    + '–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç—ã –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ —è —Ç–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –∏ –±–æ–ª–µ–µ –∫—Ä—É—Ç–æ–π. \n\n ' +
    "üìç " + hbold(' –ß—Ç–æ —è –º–æ–≥—É?') + '\n'
    + 'üö© –ü—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ –≤ –¥–∞–Ω–Ω–æ–º —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É (–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞)' + '\n' +
    'üö© –ü—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —Ç—ã –∏—Ö –ø–æ–ª—É—á–∞–µ—à—å.\n' + 
    'üö© –ü—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.\n' + 
    'üö© –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.\n\n' + 
    '–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ª—É—á—à–µ,  –∞ —á—Ç–æ —Ö—É–∂–µ.\n\n'
    'üÜò\n–°–ø—Ä–∞–≤–∫–∞: /help', parse_mode='HTML', reply_markup=get_keyboard()
    )

@dp.message_handler(commands=['help'])
async def help_user(message: types.Message):
    await message.answer("""–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞—à–µ–º—É –±–æ—Ç—É.
    /get_marks - —É–∑–Ω–∞—Ç—å –æ —Ç–≤–æ–∏—Ö —Ç–µ–∫—É—â–∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö –≤ —ç—Ç–æ–º —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ
    /get_schedule - —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    /get_homework - —É–∑–Ω–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å""", reply_markup=get_keyboard())

@dp.message_handler(lambda message: message.text == "–û—Ü–µ–Ω–∫–∏" or message.text == "/get_marks")
async def send_marks(message: types.Message):
    last_name = LAST_NAMES[str(message.from_id)]
    for st in api.students:
        if st.name.split(' ')[1] == last_name:
            await message.answer('–¢–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏:')
            for subject in st.subjects:
                if subject.marks != []:
                    await message.answer(f'{subject.name} {subject.average_mark} {subject.marks}', reply_markup=get_keyboard())

@dp.message_handler(lambda message: message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤" or message.text == "/get_schedule")
async def send_schedule(message: types.Message):
    await message.answer("""–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:""")
    if datetime.date.today().isoweekday() == 1 or datetime.date.today().isoweekday() == 6:
        await message.answer("1. 8.00-8.40\n2. 8.45-9.25\n3. 9.35-10.15\n4. 10.30-11.10\n5. 11.25-12.05\n6. 12.20-13.00\n7. 13.10-13.50", reply_markup=get_keyboard())
    else:
        await message.answer("1. 8.30-9.15\n2. 9.25-10.10\n3. 10.25-11.10\n4. 11.25-12.10\n5. 12.25-13.10\n6. 13.20-14.05\n7. 14.15-14.55", reply_markup=get_keyboard())

@dp.message_handler(lambda message: message.text == "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ" or message.text == "/get_homework")
async def send_homework(message: types.Message):
    if datetime.date.today().isoweekday() == 6:
        await message.answer("""–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:""")
    else:
        await message.answer("""–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:""")
    hws = await homeworks.get_homework()
    for hw in hws:
        await message.answer(hbold("–ü—Ä–µ–¥–º–µ—Ç: ")+hw['subject']+hbold("\n–ó–∞–¥–∞–Ω–∏–µ: ")+hw['task'], reply_markup=get_keyboard())
    
async def send_if_new_marks():
    students = copy.deepcopy(api.students)
    api.update_marks()
    for i in range(len(api.students)):
        if students[i].subjects != api.students[i].subjects:
            last_name = students[i].name.split(' ')[1]
            id = list(LAST_NAMES.keys())[list(LAST_NAMES.values()).index(last_name)]
            for j in range(len(students[i].subjects), len(api.students[i].subjects)):
                if api.students[i].subjects[j].marks != []:
                    try:
                        await bot.send_message(id, f"–£ —Ç–µ–±—è –Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {api.students[i].subjects[j].name}: {api.students[i].subjects[j].marks}")
                    except ChatNotFound:
                        print(f"Can't send to {id} {last_name}")
                        break
        for j in range(len(students[i].subjects)):
            if students[i].subjects[j].marks != api.students[i].subjects[j].marks:
                last_name = students[i].name.split(' ')[1]
                id = list(LAST_NAMES.keys())[list(LAST_NAMES.values()).index(last_name)]
                try:
                    res = list((Counter(api.students[i].subjects[j].marks) - Counter(students[i].subjects[j].marks)).elements())
                    await bot.send_message(id, f"–£ —Ç–µ–±—è –Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {api.students[i].subjects[j].name}: {res}")
                except ChatNotFound:
                    print(f"Can't send to {id} {last_name}")
                    break

async def scheduler():
    aioschedule.every(10).minutes.do(send_if_new_marks)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def on_startup(_):
    asyncio.create_task(scheduler())

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
