from api.settings import TELEGRAM_TOKEN, LAST_NAMES
from api.school33api import School33Api
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.utils.markdown import hbold, hunderline
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import aioschedule
import asyncio
import copy
from concurrent.futures import ProcessPoolExecutor

bot = Bot(token=TELEGRAM_TOKEN, parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
api = School33Api()
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –¢—ã —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–Ω–∞–µ—à—å, —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å.\n' 
    + '–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç—ã –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ —è —Ç–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –∏ –±–æ–ª–µ–µ –∫—Ä—É—Ç–æ–π. \n\n ' +
    "üìç " + hbold(' –ß—Ç–æ —è –º–æ–≥—É?') + '\n'
    + 'üö© –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ –≤ –¥–∞–Ω–Ω–æ–º —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É (–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞)' + '\n' +
    'üö© –ù–æ —Å–∫–æ—Ä–æ —è —Å–º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —Ç—ã –∏—Ö –ø–æ–ª—É—á–∞–µ—à—å –∏ ' + hunderline('–º–Ω–æ–≥–æ —á–µ–≥–æ –µ—â—ë') + ' (–ø–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏–º —ç—Ç–æ –≤ –∏–Ω—Ç—Ä–∏–≥–µ). ' + 
    '–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ª—É—á—à–µ,  –∞ —á—Ç–æ —Ö—É–∂–µ.\n\n'
    'üÜò\n–°–ø—Ä–∞–≤–∫–∞: /help', parse_mode='HTML'
    )

@dp.message_handler(commands=['help'])
async def help_user(message: types.Message):
    await message.answer("""–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞—à–µ–º—É –±–æ—Ç—É.
    /get_marks - —É–∑–Ω–∞—Ç—å –æ —Ç–≤–æ–∏—Ö —Ç–µ–∫—É—â–∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö –≤ —ç—Ç–æ–º —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ""")

@dp.message_handler(commands=['get_marks'])
async def send_marks(message: types.Message):
    last_name = LAST_NAMES[str(message.from_id)]
    for st in api.students:
        if st.name.split(' ')[1] == last_name:
            await message.answer('–¢–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏:')
            for subject in st.subjects:
                if subject.marks != []:
                    await message.answer(f'{subject.name} {subject.average_mark} {subject.marks}')

async def send_if_new_marks():
    students = copy.deepcopy(api.students)
    api.update_marks()
    if students != api.students:
        for j in range(0, len(api.students[7].subjects)):
            if j >= len(students[7].subjects):
                if api.students[7].subjects[j].marks == []: continue
                await bot.send_message('685823428', f'–ù–æ–≤—ã–π –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {api.students[7].subjects[j].name}:', api.students[7].subjects[j].marks)
            elif len(api.students[7].subjects[j].marks) > len(students[7].subjects[j].marks):
                await bot.send_message('685823428', f'–ù–æ–≤—ã–π –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {api.students[7].subjects[j].name}:', api.students[7].subjects[j].marks[len(students[7].subjects[j].marks):len(api.students[7].subjects[j].marks)])

async def scheduler():
    aioschedule.every(10).minutes.do(send_if_new_marks)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

@asyncio.coroutine
def starter():
    executor = ProcessPoolExecutor()
    out = yield from loop.run_in_executor(executor, scheduler) 
    

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(starter())
    executor.start_polling(dp, on_startup=on_startup)
