from aiogram.utils.markdown import hbold
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import datetime
from frontend import keyboards
from aiogram.utils.exceptions import ChatNotFound
from backend.databases.database import Database


class Attantion(StatesGroup):
    message = State()

async def start(message: types.Message):
    db = await Database.setup()
    first_name = (await db.get_student_by_id(message.from_user.id)).first_name
    await db.close_connection()
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {first_name}. –¢—ã —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–Ω–∞–µ—à—å, —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å.\n' 
    + '–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç—ã –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ —è —Ç–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –∏ –±–æ–ª–µ–µ –∫—Ä—É—Ç–æ–π. \n\n ' +
    "üìç " + hbold(' –ß—Ç–æ —è –º–æ–≥—É?') + '\n'+
    'üö© –ü—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ –≤ –¥–∞–Ω–Ω–æ–º —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É.\n' +
    'üö© –ü—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —Ç—ã –∏—Ö –ø–æ–ª—É—á–∞–µ—à—å.\n' + 
    'üö© –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã.\n' + 
    'üö© –ü—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, —Ö—Ä–∞–Ω–∏—Ç—å —á—Ç–æ —Ç—ã —É–∂–µ —Å–¥–µ–ª–∞–ª.\n' + 
    'üö© –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.\n\n' + 
    '–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ª—É—á—à–µ, –∞ —á—Ç–æ —Ö—É–∂–µ.\n\n'
    'üÜò\n–°–ø—Ä–∞–≤–∫–∞: /help\n–ù–æ–≤–æ—Å—Ç–∏, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ, –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—Ö: https://t.me/eduverse_official', parse_mode='HTML', reply_markup=keyboards.main('685823428'==str(message.from_user.id))
    )

async def help(message: types.Message):
    await message.answer(
    """–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞—à–µ–º—É –±–æ—Ç—É.
    /get_marks - —É–∑–Ω–∞—Ç—å –æ —Ç–≤–æ–∏—Ö —Ç–µ–∫—É—â–∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö –≤ —ç—Ç–æ–º —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ
    /get_schedule - —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    /get_homework - —É–∑–Ω–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    /get_notes - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç—ã""", 
    reply_markup=keyboards.main('685823428'==str(message.from_user.id)))

async def attention(message: types.Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è', reply_markup=keyboards.main('685823428'==str(message.from_user.id)))
    await state.set_state(Attantion.message.state)
    #TODO: option to choose students

async def send_attention(message: types.Message, state: FSMContext):
    await state.update_data(message=message.text)
    db = await Database.setup()
    students = await db.get_students()
    students = list(filter(lambda x: str(x.telegram_id) != str(message.from_user.id), students))
    await db.close_connection()
    not_sended_to = []
    for student in students:
        try:
            at = await message.bot.send_message(student.telegram_id, message.text, reply_markup=keyboards.main('685823428'==str(message.from_user.id)))
            await message.bot.pin_chat_message(message.chat.id, message_id=at.message_id)
        except ChatNotFound:
            not_sended_to.append(student.last_name)
            print('Unable to send: ', student.telegram_id, student.last_name)
    await state.finish()
    not_sended_to = str(not_sended_to).replace('[', '').replace(']', '').replace(', ', '\n').replace("'", "")
    if not_sended_to != []:
        await message.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º—É –∫–ª–∞—Å—Å—É, –∫—Ä–æ–º–µ (—É –Ω–∏—Ö –Ω–µ—Ç —á–∞—Ç–∞ —Å EduVerse Diary): ', reply_markup=keyboards.main('685823428'==str(message.from_user.id)))
        await message.answer(not_sended_to, reply_markup=keyboards.main('685823428'==str(message.from_user.id)))
    else:
        await message.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º—É –∫–ª–∞—Å—Å—É.', reply_markup=keyboards.main('685823428'==str(message.from_user.id)))

async def schedule(message: types.Message):
    await message.answer("""–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:""")
    if datetime.date.today().isoweekday() == 1 or datetime.date.today().isoweekday() == 6:
        await message.answer("1. 8.00-8.40\n2. 8.45-9.25\n3. 9.35-10.15\n4. 10.30-11.10\n5. 11.25-12.05\n6. 12.20-13.00\n7. 13.10-13.50", reply_markup=keyboards.main('685823428'==str(message.from_user.id)))
    elif datetime.date.today().isoweekday() != 7:
        await message.answer("1. 8.30-9.15\n2. 9.25-10.10\n3. 10.25-11.10\n4. 11.25-12.10\n5. 12.25-13.10\n6. 13.20-14.05\n7. 14.15-14.55", reply_markup=keyboards.main('685823428'==str(message.from_user.id)))

async def setup(dp):
    print('Register general handler...', end='')
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(help, commands=['help'])
    dp.register_message_handler(attention, commands=['attention'], state="*")
    dp.register_message_handler(send_attention,  state=Attantion.message)
    dp.register_message_handler(schedule, lambda message: message.text == "‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤" or message.text == "/get_schedule")
    print('Succsess')