from . import keyboards
from frontend.keyboards import main as keyboard_main
from aiogram import types, Dispatcher
from aiogram.utils.markdown import hbold
import datetime
import middleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from backend.databases.database import Database
from backend import homework_api
import edutypes

WEEKDAYS = [
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    '–í—Ç–æ—Ä–Ω–∏–∫',
    '–°—Ä–µ–¥–∞',
    '–ß–µ—Ç–≤–µ—Ä–≥',
    '–ü—è—Ç–Ω–∏—Ü–∞',
    '–°—É–±–±–æ—Ç–∞',
    '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
]

class HomeworkChoose(StatesGroup):
    homework = State()

class AddHomework(StatesGroup):
    subject = State()
    task = State()
    

async def get_deadline_weekday(s):
    a = [
        [
            '–†—É—Å—Å–∫–∏–π',
            '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
            '–ò—Å—Ç–æ—Ä–∏—è',
            '–û–ë–ñ',
            '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'
        ],
        [
            '–§–∏–∑–∏–∫–∞',
            '–ê–ª–≥–µ–±—Ä–∞',
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'
        ],
        [
            '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ',
            '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
            '–§–∏–∑–∏–∫–∞',
            '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
            '–ì–µ–æ–º–µ—Ç—Ä–∏—è'
        ],
        [
            '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ',
            '–ë–∏–æ–ª–æ–≥–∏—è',
            '–ê–ª–≥–µ–±—Ä–∞'
        ],
        [
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
            '–•–∏–º–∏—è',
            '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
            '–ë–∏–æ–ª–æ–≥–∏—è'
        ],
        [
            '–§–∏–∑–∏–∫–∞',
            '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
            '–†–æ–¥–Ω–æ–π —è–∑—ã–∫'
        ]
    ]
    n = datetime.date.today().weekday()
    for i in range(n+1, len(a)):
        if s in a[i]:
            for j in a[i]:
                if j == s:
                    return i

    for i in range(len(a)):
        if s in a[i]:
            for j in a[i]:
                if j == s:
                    return i

async def homework_menu(message: types.Message):
    await message.answer("–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥/–∑?", reply_markup=keyboards.week())

async def homework(call: types.CallbackQuery):
    code = call.data[-1]
    if code.isdigit():
        code = int(code)
    id = call.from_user.id
    weekday = datetime.date.today().weekday()
    date = datetime.date.today()
    if code == weekday:
        hws = await middleware.homework(date, call.from_user.id)
    else:
        date = datetime.date.today() + datetime.timedelta(days=1)
        while date.weekday() != code:
            date += datetime.timedelta(days=1)
        hws = await middleware.homework(date, call.from_user.id)

    
    await call.message.answer('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: '+WEEKDAYS[date.weekday()], reply_markup=keyboard_main('685823428'==str(call.from_user.id)))
    if hws == []:
        await call.message.answer('–î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â—ë –Ω–µ—Ç.', reply_markup=keyboard_main('685823428'==str(call.from_user.id)))
    await call.answer()
    for hw in hws:
        db = await Database.setup()
        is_done = await db.is_homework_done(hw, await db.get_student_by_id(id))
        await db.close_connection()
        await call.message.answer(hbold("–ü—Ä–µ–¥–º–µ—Ç: ")+hw.subject+hbold("\n–ó–∞–¥–∞–Ω–∏–µ: ")+hw.task, reply_markup=keyboards.is_done_checkbox(hw, is_done))
        for file in hw.files:
            if file['name'].split('.')[-1] == 'jpg':   
                await call.message.answer_photo(photo=file['file']['url'], )
            else:
                f = types.InputFile.from_url(file['file']['url'])
                await call.message.answer_document(id, f)

async def is_done_changed(call: types.CallbackQuery):
    hw_id = call.data.replace('isdone', '')
    hw = edutypes.Homework('','','','',hw_id)
    db = await Database.setup()
    is_done = await db.is_homework_done(hw, await db.get_student_by_id(call.from_user.id))
    is_done = not is_done
    await call.answer()
    await call.message.edit_reply_markup(reply_markup=keyboards.is_done_checkbox(hw, is_done))
    await db.change_homework_done(hw, await db.get_student_by_id(call.from_user.id), is_done)
    await db.close_connection()

async def add_homework(message: types.Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç', reply_markup=keyboards.add_subjects())
    await state.set_state(AddHomework.subject.state)

async def add_homework_subject_set(message: types.Message, state: FSMContext):
    await state.update_data(subject = message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ')
    await state.set_state(AddHomework.task.state)

async def add_homework_task_set(message: types.Message, state: FSMContext):
    await state.update_data(task = message.text)
    data = await state.get_data()
    await state.finish()
    code = await get_deadline_weekday(data['subject'])
    weekday = datetime.date.today().weekday() +1 
    date = datetime.date.today() + datetime.timedelta(days=1)
    if code == weekday:
        pass
    else:
        date = datetime.date.today() + datetime.timedelta(days=1)
        while date.weekday() != code:
            date += datetime.timedelta(days=1)
    data['deadline'] = str(date)
    await middleware.add_homework(data)
    await message.answer('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ', reply_markup=keyboard_main('685823428'==str(message.from_user.id)))

async def inline_homework(inline_query: types.InlineQuery):
    date = datetime.date.today() + datetime.timedelta(days=1)
    if date.isoweekday() == 7:
        date += datetime.timedelta(days=1) 
    hws = await homework_api.get_homework(date)
    result = [types.InlineQueryResultArticle(
        id=i,
        title=hw['subject'],
        description=hw['task'],
        input_message_content=types.InputTextMessageContent(
            message_text=f"<b>{hw['subject']}</b>\n{hw['task']}",
            parse_mode="HTML"
        )) for i, hw in enumerate(hws) if hw['files'] == []]
    result += [
        types.InlineQueryResultPhoto(
            id=i,
            title=f"{hw['subject']}",
            caption=f"<b>{hw['subject']}</b>\n{hw['task']}",
            thumb_url=hw['files'][0]['file']['url'],
            photo_url=hw['files'][0]['file']['url']
        ) for i, hw in enumerate(hws) if hw['files'] != []
    ]
    await inline_query.answer(result, switch_pm_text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞', switch_pm_parameter='go', cache_time=3600)

async def setup(dp: Dispatcher):
    print('Register homework handler...', end='')
    dp.register_message_handler(homework_menu, lambda message: message.text == "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ" or message.text == "/get_homework")
    dp.register_callback_query_handler(homework, lambda c: c.data and c.data.startswith('homework'))
    dp.register_callback_query_handler(is_done_changed, lambda c: c.data and c.data.startswith('isdone'))
    dp.register_message_handler(add_homework, lambda message: message.text == "/add_homework" or message.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥/–∑', state="*")
    dp.register_message_handler(add_homework_subject_set, state=AddHomework.subject)
    dp.register_message_handler(add_homework_task_set, state=AddHomework.task)
    dp.register_inline_handler(inline_homework)
    print('Succsess')

